version: '3.4'

networks:
  albums:
  customers:
  orders:
  gateway:

services:
  albums.api:
    image: ${DOCKER_REGISTRY-}albumsapi
    networks:
      - albums
      - gateway
    build:
      context: .
      dockerfile: MicroServices/APIs/Albums/Albums.API/Dockerfile
    depends_on:
      - albums.db
    environment:
      - DB_HOST=albums.db
      - DB_DATABASE=AlbumsDB
    ports:
      - "6200:8080"

  customers.api:
    image: ${DOCKER_REGISTRY-}customersapi
    networks:
      - customers
      - gateway
    build:
      context: .
      dockerfile: MicroServices/APIs/Customers/Customers.API/Dockerfile
    depends_on:
      - customers.db
    environment:
      - DB_HOST=customers.db
      - DB_DATABASE=CustomersDB
    ports:
      - "6004:8080"
      - "6005:8081"

  orders.api:
    image: ${DOCKER_REGISTRY-}ordersapi
    networks:
      - orders
      - gateway
    build:
      context: .
      dockerfile: MicroServices/APIs/Orders/Orders.API/Dockerfile
    depends_on:
      - orders.db
    environment:
      - DB_HOST=orders.db
      - DB_DATABASE=OrdersDB
    ports:
      - "6300:8080"

  albums.db:
    container_name: albumsdb
    image: mongo:latest
    networks:
      - albums
    ports:
      - "6003:27017"

  customers.db:
    container_name: customersdb
    image: mongo:latest
    networks:
      - customers
    ports:
      - "6001:27017"

  orders.db:
    container_name: ordersdb
    image: mongo:latest
    networks:
      - orders
    ports:
      - "6002:27017"

  gateway:
    image: ${DOCKER_REGISTRY-}gateway
    build:
      context: .
      dockerfile: MicroServices/Gateway/Gateway/Dockerfile
    networks:
      - gateway
    depends_on:
      - albums.api
      - customers.api
      - orders.api
    ports:
      - "5000:8080"
      - "5001:8081"

  rabbitmq:
    container_name: rabbit
    image: rabbitmq:management
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest